#include <LiquidCrystal.h>
#include <unistd.h>

#include <SPI.h>
#include <String.h>
#include <stdio.h>
#include <stdlib.h>

char incomingChar = 0;   // for incoming serial data
String string_Ary[10];
char numChar[10];
double features[10];
int cnt = 0;
int num_cnt = 0;
int thinking = 0;
//global Declarations for 2D Arrays variabls
int layer1_row_ar1 = 40;
int layer1_col_ar1 = 10;
int layer1_row_ar2 = 10;
int layer1_col_ar2 = 1;

int layer2_row_ar1 = 2;
int layer2_col_ar1 = 40;
int layer2_row_ar2 = 40;
int layer2_col_ar2 = 1;


double  w1[40][10] = {
		{1.74281466498143,0.799431600577583,1.21243291718074,0.820060966210418,-0.464739242935653,-1.60550512043602,-1.97754091337418,-3.46615235146503,-0.322586724698488,-2.33317788297732},
		{0.886419152794136,-2.50060039338225,0.704943700740531,0.952652035971719,-0.116071715947840,0.483872969076379,-1.26843956957144,-0.166948460297526,0.417817208672114,-1.42920101523800},
		{0.940995875989958,-0.806976019486037,-0.112934754081502,-0.528810485121697,0.660816202478541,0.584399908245544,-2.23144504715724,-1.92251387362591,-1.80149272408836,0.0939828803292681},
		{2.08359690179070,1.29386979212724,0.685995601599401,0.0180434444904609,-0.360389129381998,-2.33373178459211,-0.969340848083196,-1.35140628244650,-0.572178728984617,-2.76140477282830},
		{0.710206857354273,-0.227031120774199,-0.237449620868730,-0.946602640492537,0.619508022521229,-1.48846948643718,-1.26569613137025,1.79691439999759,-3.21684796704262,-1.36106168683075},
		{0.945951341872365,-0.0555673655676816,-0.563001330276870,-0.362655310142331,-0.195988983641913,-1.16547612429668,0.426492870799243,-0.257109922280338,-0.679628775348553,0.312521587678800},
		{-2.74507655943270,-0.466705071966035,1.69141789931990,-0.537521092810914,0.352088283552885,1.93059454947150,0.559389828569666,1.72251136286112,1.38629482192479,-1.76648147730500},
		{-0.373962977805272,-0.604866200582804,0.603144062221032,-1.37529790632966,-1.15401201055538,1.44283909008384,-0.128884667639327,-1.12642634719063,0.543827348946666,1.76154574280540},
		{1.17721859364048,-0.0306453309324942,-1.10397683615677,-1.47779907706238,-0.455726232823248,0.122122757353201,-1.90933466102156,0.956213588169910,1.09288058702550,0.849602873997306},
		{0.335285673978944,0.820695243363061,-2.01344295016911,0.00887862276141181,-0.219363837342638,1.16621722621871,-0.950942352136089,-1.86487344442974,-0.256112451693289,-0.377870064602101},
		{-3.13885296252144,-0.592975379362033,-2.38581790602902,1.71139456224895,0.218580205667779,0.940549754470386,1.93434599306499,1.25488008063510,1.79304563769172,4.28616800661174},
		{-1.82797886270228,0.285198422338830,-2.44872447711268,1.28471813482737,-1.43260965746398,-0.992931444397162,-0.375553993607987,0.362628711992687,0.910496935140393,1.17266542549198},
		{-5.17989185844840,-1.15546405859223,-1.00593988601367,-1.20955043015913,0.925798464694853,2.48124271207964,2.78925849161909,1.64786815191666,3.37817334897302,1.19927360607076},
		{0.277587267898015,-0.0802927947622985,0.564937117635825,0.451099388744298,0.672889694837674,1.98416827317661,-1.72134737995304,-0.0698476371618169,-0.333176066917332,0.997902854397457},
		{0.975014896069880,0.0515095111285624,-0.939198829520893,-0.802296474725146,-0.399357706663203,0.404510327533329,-0.261684458263565,-1.17243807469718,1.33793902174712,0.272886428663364},
		{0.104752400310830,1.22113073733288,0.257349339875771,-1.46372905195705,0.704111547501180,0.852887333783299,-0.290042822202022,-1.09350366614213,-0.887630866449236,0.663627449072934},
		{2.37932697871516,-2.39014784745584,0.369390968744318,0.103380233863830,-0.349940657760335,-1.54349782875212,-0.722357595982871,-0.722157363792119,-0.430071828973596,0.263474783375235},
		{-0.640975417805450,-1.67655406905497,-1.38621093328876,-0.471864493201161,-0.115502755273299,0.571055857285247,0.112002770022469,-1.01916620888080,0.650735232216663,-0.191092837409634},
		{-1.45106686532461,1.23269619338784,-0.853741763416094,0.00998206763917907,1.26559847109847,0.0105640628586310,1.86249073875154,-0.439166480615493,-0.787711310512203,1.92348318240765},
		{-0.150886592890565,1.93651123149509,-0.723154623675661,0.803193083859478,-0.513490874819975,0.568592392415263,-1.02350025914190,-0.923976745999643,0.979551735985468,-0.744563262900847},
		{0.105655529181479,-0.205385327479189,-0.802150944698948,-0.935794210824909,-2.04318925689518,1.27650525502455,-0.351117114849689,1.24176276372955,-1.68353762066320,0.632857964212093},
		{0.613448868643428,1.06123883016746,-0.622262064717051,-0.244683630641855,-1.30834354972786,-0.683266514979406,-1.58696357527502,0.0877828706590646,-2.66663905895749,1.72607792911326},
		{0.121042362304243,2.17017706553378,0.787165554025677,-1.70037764874854,0.290834399948293,1.50592272677465,0.727927141741103,0.283462225550691,-0.158925175338600,-0.413354525261060},
		{-0.764094205747632,0.187577707499249,-0.509016169613734,-0.384289808800411,-0.216360403108415,-0.943701640426047,-1.20683931511584,-0.839636994744325,0.328121823548226,0.633663320288109},
		{-1.52294750049538,-0.455331560371995,0.694400199724907,0.988956357658242,2.75143840315036,0.0409801959096412,-0.858137338609970,0.276903591812020,1.27546585252748,0.319565362848211},
		{-0.585558398472471,-0.501342213046843,0.321396781186143,-1.76207488441991,-1.42947144997650,0.292409434480614,1.40995126917348,0.310962950389743,0.111706263484907,-0.355321031462198},
		{-1.63657614684380,-0.00772014510158940,0.503952743944557,0.767466799284343,0.0877744049007897,1.50693199580242,1.16163987298021,-0.726971608238334,1.05251512845333,0.0934687746605012},
		{0.652061290051682,0.455158589443244,0.750609275356502,-1.52710897764168,-0.0969008038204973,-0.463784155880895,-0.900935703298610,-1.31619621471595,0.120051479282285,0.496519903077409},
		{3.45691826424304,1.22651465148101,-0.595515499016912,0.956526215117381,-4.27346473087028,-4.43139434106829,-0.0996413718715862,-0.624064350870727,5.85904065565451,5.73827357419930},
		{-1.85300581804828,2.03730913424660,1.46733281610559,-0.450291652280991,1.07918731509725,1.41661411728270,-0.659096064049568,0.872793271868792,-0.968770187983227,0.886427949383776},
		{0.365956304105715,-0.337077817296109,-1.58210882334842,-0.276477398101720,0.745381980852117,0.363941675086639,0.107127869238536,-1.01131395955239,-0.0757038279365937,-0.243759982193961},
		{-0.917775316004927,-0.746360954597810,0.505484873127829,-1.62707678944432,1.52414564994992,-1.93195898402431,1.82071342375708,0.0400039165078085,-0.599487468549319,-1.97362194292177},
		{5.01663210906849,1.60412912704684,-4.39333662424257,0.888710953079611,-2.45079453617898,-3.32857899095166,1.09825683304332,1.16400996946011,5.44037402924819,4.08131642403330},
		{0.0521980326743585,0.235310979756985,-2.01079613900894,-0.193021230885822,-3.55016835683228,-1.70058703158379,-0.443151935013329,0.0912160783477667,2.29665018167773,0.260977578911762},
		{0.917427019913933,1.51195131914425,-0.199329585036526,0.449378421080967,-0.659662656242228,1.23340062195319,-0.733442729744184,-1.37340709723338,-2.85847056460588,-2.78524097643103},
		{-0.787594328942047,-2.09230454947214,-2.18060417143587,-0.189467145477705,0.313088666434722,1.38829857019983,1.04007500130939,-0.225808082211660,0.0346497541118351,1.00994480304562},
		{0.522655741887761,-0.151071474083808,-1.13175690422414,-0.641837728052274,-0.815556097187565,-0.183582452518194,0.607148062566090,-0.307524271491665,-0.321416452287803,0.390624226611508},
		{-0.153514777205223,-2.59370415280194,0.841998755066489,0.852569237093837,-0.0610521352190025,-1.10788702383939,-0.352655387691958,1.26005869310784,0.354401006077441,0.620388728588253},
		{0.285161831623309,0.573809209232099,-0.189884050482775,0.0810412387046315,0.133394561449615,1.37974736172313,-0.0959753573290379,-1.05860790552557,1.84903550043408,-0.463447026788220},
		{-0.339071986522494,0.873523442394498,2.77286476228999,-0.639645508212700,-0.452238103548602,-0.430012585019941,-0.711745114083527,-0.170972906400341,0.944019650247499,-0.636462273124270}};
double  w2[2][40] = {
			{-2.30218592852364,0.596065434634614,-1.69531184265836,-2.41735102275185,-0.977173963361709,-0.288659347980310,-0.130399098238212,0.251410546806799,0.459843991085512,-0.950352675723268,-3.29692388180403,0.831019915827949,2.99595529443744,-0.173113763826654,-0.897169467764547,-0.702310096724073,0.0597067594254608,-0.259199697313599,0.741182647774101,-0.963191566489921,0.400687286711034,-2.48905982863403,1.64055674017588,-0.644033255408983,-2.26595483132611,0.295477765707889,-0.0555612454725349,-0.294807705528419,2.51131450814253,1.50144371818827,0.274393066425538,-0.718235927912184,1.97951056752495,1.30484971858207,4.51062048855401,-0.757499952722347,0.760068786653190,0.247745218634757,-0.284803967205501,-1.29593296633951},
			{-0.453816254560524,1.59601685916235,0.552743750379699,-0.905174437944342,-1.17686089186109,-0.407599454946065,1.43759011497738,1.07909168064664,-0.898104744016308,0.545295311742265,-0.239908996885434,0.542462982607120,3.30243541701008,1.79248939797436,1.27405286982093,0.675745167170557,-0.534211820562676,0.958874031438824,0.702511868634043,-1.52354380518740,0.527957855001585,0.0354799725563983,-0.404241042232159,-1.00760806223239,-0.705222454420398,-0.982349029001017,1.11195026916558,0.380291988768818,-2.04665622029718,-1.48800723354150,-0.927325791348635,0.438761244730797,-2.43190232439776,-0.930131393543046,-0.0583966191788384,-2.63161006800293,1.87480789736316,0.917719313551281,-1.36333774120700,-1.03226220721609}};


double networkout_val[2][1];
double product1[40][1];
double product2[40][1];  

#define PIN_GATE_IN 7
#define IRQ_GATE_IN  6
#define PIN_LED_OUT 13


 
//instantiate the lcd
LiquidCrystal lcd(10, 9, 5, 4, 3, 2);

void setup(){
  //AUDIO SET UP
 
 lcd.begin(20,4);
  Serial.begin(9600);
  //  Configure LED pin as output
  pinMode(PIN_LED_OUT, OUTPUT);
  
  // configure input to interrupt
  pinMode(PIN_GATE_IN, INPUT);

  lcd.clear();  
  }

void loop()
{
  if(thinking == 0){
  	printGUI();
  }
  else{
  	printThinkGUI();
  }
  

  // send data only when you receive data:
        if (Serial.available() > 0) {
        	thinking = 1;
                // read the incoming byte:
                incomingChar = Serial.read();
                

                if(incomingChar == '#')
                {
                	lcd.setCursor(0,2);
                	string_Ary[cnt].concat(numChar);
                	lcd.print(string_Ary[cnt]);
                	cnt++;
                	memset(numChar, 0, 10);
                	num_cnt = 0;
                
                }
                else{
                	numChar[num_cnt] += incomingChar;
                    num_cnt++;
                }
            
                lcd.clear();
        }
        if(cnt == 10){

        	for (int i = 0; i < 10; i++)
        	{
        		features[i] = string_Ary[i].toFloat();
        		// string_Ary[i] = "";
        	}

    	    
        	
        	for(int i = 0 ; i < 10; i++)
        	{
        		lcd.setCursor(0,0);
    	    	lcd.print("FEATURES:");
        		lcd.setCursor(0,1);
        		lcd.print(features[i]);
        		
        		delay(500);
        		lcd.clear();
        	}
        	nueralNet(features);
        	numdecide();
        	lcd.clear();


        	memset(string_Ary,0,10);
        	memset(numChar, 0, 10);
            num_cnt = 0;
        	cnt = 0;
        	thinking = 0;
        }
 
}

void printGUI(){

  lcd.setCursor(0, 0);
  lcd.print("Nueral Voice Detect");
  delay(25);

}

void printThinkGUI(){

  
  lcd.setCursor(0,0);
  lcd.print("Feature Extract... ");
  delay(25);

}
void numdecide(){
	lcd.setCursor(0,3);
	int networkout[2];

	
    if(networkout_val[0][0] < .5)
    	networkout[0] = 0;
    else
    	networkout[0] = 1;

    if(networkout_val[1][0] < .5)
    	networkout[1] = 0;
    else
    	networkout[1] = 1;
   
    if(networkout[0] == 0 && networkout[1] == 0){
    	lcd.print("I heard ONE.");
    	delay(5000);
    }
    else if(networkout[0] == 0 && networkout[1] == 1){
    	lcd.print("I heard TWO. ");
    	delay(5000);
    }
    else if(networkout[0] == 1 && networkout[1] == 0){
    	lcd.print("I heard THREE. ");
    	delay(5000);
    }
    else if(networkout[0] == 1 && networkout[1] == 1){
    	lcd.print("I heard FOUR. ");
    	delay(5000);
    }
    else{
    	lcd.print("Sorry I could not understand. ");
    	delay(2000);
    }
    

}

void nueralNet(double * features){
	lcd.setCursor(0,0);
    lcd.print("Running network : ");

    
	
	double ** layer_tmp;
	double layer1out_val[40][1];
	
	
	double t1[40][1];
	double t2[2][1];

	
	/***************Layer 1 OUTPUT *****************/
	/*This module is for handeling the layer 1 output
	 *and setting the nuerons in the first layer
	 */
	
	matrixMultiply_t1(w1,features);
	
	for(int i = 0; i < 40; i++){
		for(int j = 0; j < 1; j++){
			t1[i][j] = product1[i][j];
		}
	}

   

	layer_tmp = layer1out(40,1,t1);

	
			
	for(int i = 0; i < 40; i++)
		for(int j = 0; j < 1; j++)
			layer1out_val[i][j] = layer_tmp[i][j];
		
	destroyArray(layer_tmp);	
	
	
	/***************NETWORK OUTPUT *****************/
	matrixMultiply_t2(w2,layer1out_val);
	for(int i = 0; i < 2; i++)
		for(int j = 0; j < 1; j++)
			t2[i][j] = product2[i][j];
		
	
	
	layer_tmp = networkout(2,1,t2);
	
	for(int i = 0; i < 2; i++)
		for(int j = 0; j < 1; j++)
			networkout_val[i][j] = layer_tmp[i][j];
	
	
    
	destroyArray(layer_tmp);
	
}
//converts dynamic array to static 
double sigmoid(double x)
{
     double exp_value;
     double return_value;

     /*** Exponential calculation ***/
     exp_value = exp((double) -x);

     /*** Final sigmoid value ***/
     return_value = 1 / (1 + exp_value);

     return return_value;
}
void destroyArray(double** arr){
    free(*arr);
    free(arr);
}
double** createArray(int m, int n){
    
	double **arr = (double **)malloc(m * sizeof(double *));
	for (int i=0; i<m; i++)
		arr[i] = (double *)malloc(n * sizeof(double));

	return arr;
}



double ** layer1out(int m, int n,double t1[40][1]  )
{


	double ** layer1_output = createArray(m,n);
    
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			layer1_output[i][j] = sigmoid(t1[i][j]);
		
		}
	}
	
	
	return layer1_output;
}

double ** networkout(int m, int n , double t2[][1] )
{
	
	double ** layer2_output = createArray(m,n);
	
	
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < n; j++)
			{
				layer2_output[i][j] = sigmoid(t2[i][j]);	
			}
		}
	return layer2_output;
}

void matrixMultiply_t1(double  first[][10] , double second[10]){
  int  c, d, k;
  double  sum = 0;
  double multiply[40][40];
 
	for (c = 0; c < layer1_row_ar1; c++){ 
		for (d = 0; d < layer1_col_ar2; d++){ 
			for (k = 0; k < layer1_row_ar2; k++){ 
				sum = sum + first[c][k]*second[k];
			}
		multiply[c][d] = sum;
		sum = 0;
		}
	}


  for (c = 0; c < layer1_row_ar1; c++) 
    for (d = 0; d < layer1_col_ar2; d++)
      product1[c][d] = multiply[c][d];
   
 
  
 

}
void matrixMultiply_t2(double  first[][40] , double second[][1]){
	int  c, d, k;
	double  sum = 0;
	double multiply[40][40];

	
	
	for (c = 0; c < layer2_row_ar1; c++) {
		for (d = 0; d < layer2_col_ar2; d++) {
			for (k = 0; k < layer2_row_ar2; k++) {
				sum = sum + first[c][k]*second[k][d];
			}
			
			multiply[c][d] = sum;
			sum = 0;
		}
	}
	for (c = 0; c < layer1_row_ar1; c++) {
		for (d = 0; d < layer2_col_ar2; d++)
			
			product2[c][d] = multiply[c][d];
		
	}
	

	
}













